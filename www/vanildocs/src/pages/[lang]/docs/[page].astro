---
import PageLayout from "../../../layouts/PageLayout.astro"
import DocPageLayout from "../../../layouts/DocPageLayout.astro"
import { setNavSectionActive } from "../../../function/setNavSectionActive"
import { STORE_KEY_TOC, NavSectionTypes } from "../../../config/constants"
import { get, props, changeLanguage } from "vanil"
import SectionsNav from "../../../components/SectionsNav.astro"

// i18n runtime lang sync
changeLanguage(props.lang)

setNavSectionActive('docs')

// TODO: allow switching to page by dynamically looking up lang page alternatives
console.log('i18nLinks', props.i18nLinks)

/** isolated executed getStaticPaths(), only for path materialization */
export const getStaticPaths = async() => {
  const allDocsPages = get(STORE_KEY_TOC)[NavSectionTypes.DOCS]
  return allDocsPages.filter((docPage: any) => !docPage.params.section)
}
---
<PageLayout>
  <DocPageLayout title="Welcome" sectionHead="Some nice intro text">

    <nav slot="doc.page.toc">
      <SectionsNav />
    </nav>

    <div slot="doc.page.content">
      <h1>Welcome!</h1>

      <p>
        Here is a simple example of how Vanil code looks like and works:
      </p>

      <iframe src="https://codesandbox.io/embed/how-to-use-the-debug-component-2oszj?fontsize=14&hidenavigation=1&module=%2Fsrc%2Fpages%2Findex.astro&theme=dark"
        style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
        title="How to use the Debug component"
        allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
        sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
      ></iframe>
    </div>
    

    <div slot="doc.page.toc.page">
      <h4>TL;DR</h4>
      <p>
        Vanil has been developed by Aron Homberg (kyr0). 
        It is his answer to todays framework fatigue.
      </p>

      <p>
        It's a web compiler that uses the `astro` file format to 
        processes Node.js and then compile TSX/JSX, HTML, SCSS, CSS 
        + any media file into a static WebApp.
      </p>

      <p>
        You don't need any framework anymore to work
        like in React but you're free to use them.
      </p>

      <p>
        <strong>
          A thin dynamic (only compiled in, if used) runtime API 
          handles state hydration and provides pattern primitives.
        </strong>
      </p>
    </div>

  </DocPageLayout>
</PageLayout>